# REST API Plan

## 1. Resources
- **User**: Corresponds to the `user` table in the database.
- **LegoSet**: Corresponds to the `legoset` table in the database.
- **User_Set**: Corresponds to the `user_set` table in the database.
- **Reservation**: Corresponds to the `reservation` table in the database.
- **Friend**: Corresponds to the `friend` table in the database.

## 2. Endpoints

### User

- **HTTP Method**: POST
  - **URL**: `/api/users`
  - **Description**: Create a new user.
  - **Request Payload**:
    ```json
    {
      "email": "user@example.com",
      "nickname": "user123",
      "password": "securepassword"
    }
    ```
  - **Response Payload**:
    ```json
    {
      "id": 1,
      "email": "user@example.com",
      "nickname": "user123"
    }
    ```
  - **Success Codes**: 201 Created
  - **Error Codes**: 400 Bad Request (if validation fails)

- **HTTP Method**: GET
  - **URL**: `/api/users/{id}`
  - **Description**: Retrieve user details by ID.
  - **Response Payload**:
    ```json
    {
      "id": 1,
      "email": "user@example.com",
      "nickname": "user123"
    }
    ```
  - **Success Codes**: 200 OK
  - **Error Codes**: 404 Not Found (if user does not exist)

### LegoSet

- **HTTP Method**: POST
  - **URL**: `/api/legosets`
  - **Description**: Create a new Lego set.
  - **Request Payload**:
    ```json
    {
      "name": "Lego Set Name",
      "set_number": "12345"
    }
    ```
  - **Response Payload**:
    ```json
    {
      "id": 1,
      "name": "Lego Set Name",
      "set_number": "12345"
    }
    ```
  - **Success Codes**: 201 Created
  - **Error Codes**: 400 Bad Request (if validation fails)

### User_Set

- **HTTP Method**: POST
  - **URL**: `/api/users/{userId}/legosets`
  - **Description**: Add a Lego set to a user's collection.
  - **Request Payload**:
    ```json
    {
      "set_id": 1,
      "owned": true
    }
    ```
  - **Response Payload**:
    ```json
    {
      "user_id": 1,
      "set_id": 1,
      "owned": true
    }
    ```
  - **Success Codes**: 201 Created
  - **Error Codes**: 400 Bad Request (if validation fails)

- **HTTP Method**: GET
  - **URL**: `/api/users/{userId}/legosets`
  - **Description**: Retrieve all Lego sets owned by a user.
  - **Response Payload**:
    ```json
    {
      "user_id": 1,
      "sets": [
        {
          "id": 1,
          "name": "Lego Set Name",
          "set_number": "12345"
        }
      ]
    }
    ```
  - **Success Codes**: 200 OK
  - **Error Codes**: 404 Not Found (if user does not exist)

### Reservation

- **HTTP Method**: POST
  - **URL**: `/api/users/{userId}/reservations`
  - **Description**: Create a new reservation for a Lego set.
  - **Request Payload**:
    ```json
    {
      "set_id": 1,
      "status": "active"
    }
    ```
  - **Response Payload**:
    ```json
    {
      "id": 1,
      "user_id": 1,
      "set_id": 1,
      "reservation_date": "2024-01-01T00:00:00Z",
      "status": "active"
    }
    ```
  - **Success Codes**: 201 Created
  - **Error Codes**: 400 Bad Request (if validation fails)

- **HTTP Method**: GET
  - **URL**: `/api/users/{userId}/reservations`
  - **Description**: Retrieve all reservations for a user.
  - **Response Payload**:
    ```json
    {
      "user_id": 1,
      "reservations": [
        {
          "id": 1,
          "set_id": 1,
          "reservation_date": "2024-01-01T00:00:00Z",
          "status": "active"
        }
      ]
    }
    ```
  - **Success Codes**: 200 OK
  - **Error Codes**: 404 Not Found (if user does not exist)

### Friend

- **HTTP Method**: POST
  - **URL**: `/api/users/{userId}/friends`
  - **Description**: Send a friend request to another user.
  - **Request Payload**:
    ```json
    {
      "friend_id": 2
    }
    ```
  - **Response Payload**:
    ```json
    {
      "id": 1,
      "user_id": 1,
      "friend_id": 2,
      "invitation_status": "pending"
    }
    ```
  - **Success Codes**: 201 Created
  - **Error Codes**: 400 Bad Request (if validation fails)

- **HTTP Method**: GET
  - **URL**: `/api/users/{userId}/friends`
  - **Description**: Retrieve all friends of a user.
  - **Response Payload**:
    ```json
    {
      "user_id": 1,
      "friends": [
        {
          "id": 1,
          "friend_id": 2,
          "invitation_status": "accepted"
        }
      ]
    }
    ```
  - **Success Codes**: 200 OK
  - **Error Codes**: 404 Not Found (if user does not exist)

## 3. Authentication and Authorization
- **Mechanism**: JWT (JSON Web Tokens)
  - **Implementation**: Users will authenticate using their email and password, receiving a JWT upon successful login. This token will be included in the Authorization header for subsequent requests to protected endpoints.

## 4. Validation and Business Logic
- **Validation Conditions**:
  - User email must be unique and valid.
  - Lego set number must be unique.
  - Reservation status must be either 'active' or 'completed'.
  - Friend invitation status must be either 'pending' or 'accepted'.

- **Business Logic Implementation**:
  - When a user creates a reservation, the API checks if the Lego set is available.
  - When adding a Lego set to a user's collection, the API checks if the set already exists in the user's collection.
  - Friend requests can only be sent to users who exist in the system.
